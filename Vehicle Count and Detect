In this project, we will be working on detecting and counting vehicles in a given image or a video. We will be using OpenCV for image processing and Haar cascade which is used for object detection.
Next we will fetch the image from the internet that we will be working on. We will then resize the image and convert it into a numpy array.
Now in order to get better output, we will perform some transformations on the image. Here we wil convert the image into grayscale.
Next we will apply GaussianBlur to remove the noise from the image. Instead of a box filter consisting of equal filter coefficients, a Gaussian kernel is used. It is done with the function, cv2.GaussianBlur(). We should specify the width and height of the kernel which should be positive and odd.
Here we will dilate image. It is just opposite of erosion. Here, a pixel element is '1' if atleast one pixel under the kernel is '1'. So it increases the white region in the image or size of foreground object increases.
Now we will perform Morphology transformation with kernel. MorphologyEx is used to find the difference between dilation and erosion of an image. You may need elliptical/circular shaped kernels. So for this purpose, OpenCV has a function, cv2.getStructuringElement(). You just pass the shape and size of the kernel, you get the desired kernel.
Now we need car cascade to detect cars. So, we first need to upload them to collab and then specify the path to car_cascade_src. OpenCV provides a training method (see Cascade Classifier Training) or pretrained models, that can be read using cv2.CascadeClassifier() method. We need to detect multiple objects i.e. cars so we will use detectMultiScale. Detects objects of different sizes in the input image. The detected objects are returned as a list of rectangles.
Now we will use the above returned contours and draw a rectangle around detected cars. Here we will see that it will create the rectangle with red boundary around each and every car it detects.
Now we will use another image i.e. bus image and we will fetch this image from the internet. We will resize the image and store it as a numpy array and also convert it into grayscale.
As we are working with the bus image here so we require the cascade for detecting the bus. We will use Bus_front cascade to identify bus from the image. We will perform similar operation as performed above.
As we did in car cascading similarly we will be performing the same contour operations on the bus image and create a rectangle around the bus if detected any.
Now we will perform the vehicle detection and counting in a video. For creating the output video from frames or images we need cv2.VideoWriter() method. It take path with extension as first parameter, second parameter is the codec for output format, then we also need to pass frames per second and height and width.
Now we will read frames one by one from the input video, convert them into grayscale and using car cascade to detect all cars in that particular frame. In the end we write this video using video.write() method and video.release() will save this video to the given path.
We started with downloading the image we will be working on and performed different operations on that image. We saw how we can use haar cascade which is used for object detection. We saw how different haar cascade is used for car detection, bus detection.
